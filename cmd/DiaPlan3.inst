// *** Instinct Robot Plan generated by dia/instinctgen.py ***
// *** 2016-11-28 16:01:21 C:\Users\rwortham\Documents\Bath\University\Arduino Robot\Instinct-GUITestHarness\plans\DiaPlan3.inst

// *** First, clear the old plan and initialise the buffers ***
PLAN R C
// AP=3, APE=9, C=2, CE=6, D=3, A=9
PLAN R I 3 9 2 6 3 9

// *** These are the Plan Elements. ***

// ActionPatternElement: RTA1
// 	Parents: ReverseTurnAvoid
// 	Children: Stop
//	Order=1
PLAN A L 13 4 16 1

// ActionPatternElement: RTA3
// 	Parents: ReverseTurnAvoid
// 	Children: RandomTurn90
//	Order=2
PLAN A L 15 4 9 2

// ActionPatternElement: RTA2
// 	Parents: ReverseTurnAvoid
// 	Children: MoveBack
//	Order=2
PLAN A L 14 4 17 2

// Action: Sleep200
// 	Parents: DoMate3
//	Action=Sleep
//	ActionValue=200
PLAN A A 31 5 200

// SetSpeed to 1
// Action: LowSpeed
// 	Parents: TA5, CD1, CE2
//	Action=SetSpeed
//	ActionValue=1
PLAN A A 7 1 1

// Make an Emergency Avoid when very close to a wall
// Drive: Mate
// 	Children: DoMating
//	Priority=230
//	Interval=1
//	Sense=SenseMate
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=1
//	SenseFlexLatchHysteresis=0
//	RampIncrement=1
//	UrgencyMultiplier=0
//	RampInterval=10
PLAN A D 26 27 230 1 9 2 0 1 0 1 0 10

// ActionPatternElement: CD1
// 	Parents: ChangeDirection
// 	Children: LowSpeed
//	Order=1
PLAN A L 21 20 7 1

// ActionPatternElement: CD2
// 	Parents: ChangeDirection
// 	Children: TurnLeftOrRight
//	Order=2
PLAN A L 22 20 12 2

// Action: MateNow
// 	Parents: DoMate2
//	Action=Mate
//	ActionValue=0
PLAN A A 30 8 0

// ActionPatternElement: DoMate3
// 	Parents: DoMating
// 	Children: Sleep200
//	Order=3
PLAN A L 32 27 31 3

// ActionPatternElement: DoMate2
// 	Parents: DoMating
// 	Children: MateNow
//	Order=2
PLAN A L 29 27 30 2

// ActionPatternElement: DoMate1
// 	Parents: DoMating
// 	Children: Stop
//	Order=1
PLAN A L 28 27 16 1

// Randomly turn one way or another
// Competence: TurnLeftOrRight
// 	Parents: CD2
// 	Children: TLR1, TLR2
//	UseORWithinCEGroup=1
PLAN A C 12 1

// Action: Stop
// 	Parents: RTA1, DoMate1
//	Action=Stop
//	ActionValue=0
PLAN A A 16 4 0

// Template for Drives
// Drive: Explore
// 	Children: ForwardAvoiding
//	Priority=240
//	Interval=1
//	Sense=Fifty
//	Comparator=TR	// EQ, NE, GT, LT, TR, FL
//	SenseValue=0
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 10 1 240 1 8 4 0 0 0 0 0 0

// SetSpeed to 2
// Action: HighSpeed
// 	Parents: CE4
//	Action=SetSpeed
//	ActionValue=2
PLAN A A 6 1 2

// ActionPattern: DoMating
// 	Parents: Mate
// 	Children: DoMate3, DoMate1, DoMate2
PLAN A P 27

// Action: MoveBack
// 	Parents: RTA2
//	Action=MoveBy
//	ActionValue=-1
PLAN A A 17 2 -1

// ActionPatternElement: TA5
// 	Parents: ReverseTurnAvoid
// 	Children: LowSpeed
//	Order=4
PLAN A L 5 4 7 4

// Action: RandomTurn90
// 	Parents: RTA3
//	Action=RandomTurn
//	ActionValue=90
PLAN A A 9 9 90

// Make an Emergency Avoid when very close to a wall
// Drive: EmergencyAvoid
// 	Children: ReverseTurnAvoid
//	Priority=250
//	Interval=1
//	Sense=Front
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=2
//	SenseHysteresis=2
//	SenseFlexLatchHysteresis=0
//	RampIncrement=0
//	UrgencyMultiplier=0
//	RampInterval=0
PLAN A D 11 4 250 1 5 3 2 2 0 0 0 0

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
// 	Parents: Explore
// 	Children: CE2, CE1, CE3, CE4
//	UseORWithinCEGroup=1
PLAN A C 1 1

// CompetenceElement: CE4
// 	Parents: ForwardAvoiding
// 	Children: HighSpeed
//	Priority=6
//	RetryLimit=0
//	Sense=Front
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=4
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 2 1 6 6 0 5 2 4 0 0

// CompetenceElement: CE3
// 	Parents: ForwardAvoiding
// 	Children: ChangeDirection
//	Priority=4
//	RetryLimit=0
//	Sense=Front
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=2
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 3 1 20 4 0 5 2 2 0 0

// CompetenceElement: CE2
// 	Parents: ForwardAvoiding
// 	Children: LowSpeed
//	Priority=2
//	RetryLimit=0
//	Sense=Front
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=1
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 19 1 7 2 0 5 2 1 0 0

// CompetenceElement: CE1
// 	Parents: ForwardAvoiding
// 	Children: ReverseTurnAvoid
//	Priority=1
//	RetryLimit=0
//	Sense=Front
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=2
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 8 1 4 1 0 5 3 2 0 0

// ActionPattern: ReverseTurnAvoid
// 	Parents: EmergencyAvoid, CE1
// 	Children: RTA1, RTA2, RTA3, TA5
PLAN A P 4

// Action: TurnRight45
// 	Parents: TLR2
//	Action=Turn
//	ActionValue=45
PLAN A A 18 3 45

// Action: TurnLeft45
// 	Parents: TLR1
//	Action=Turn
//	ActionValue=-45
PLAN A A 25 3 -45

// CompetenceElement: TLR2
// 	Parents: TurnLeftOrRight
// 	Children: TurnRight45
//	Priority=2
//	RetryLimit=0
//	Sense=Random
//	Comparator=GT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=66
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 24 12 18 2 0 7 2 66 0 0

// CompetenceElement: TLR1
// 	Parents: TurnLeftOrRight
// 	Children: TurnLeft45
//	Priority=2
//	RetryLimit=0
//	Sense=Random
//	Comparator=LT	// EQ, NE, GT, LT, TR, FL
//	SenseValue=50
//	SenseHysteresis=0
//	SenseFlexLatchHysteresis=0
PLAN A E 23 12 25 2 0 7 3 50 0 0

// ActionPattern: ChangeDirection
// 	Parents: CE3
// 	Children: CD1, CD2
PLAN A P 20

// *** Plan Element Names follow ... ***

// ActionPatternElement: RTA1
PELEM RTA1=13

// ActionPatternElement: RTA3
PELEM RTA3=15

// ActionPatternElement: RTA2
PELEM RTA2=14

// Action: Sleep200
PELEM Sleep200=31

// SetSpeed to 1
// Action: LowSpeed
PELEM LowSpeed=7

// Make an Emergency Avoid when very close to a wall
// Drive: Mate
PELEM Mate=26

// ActionPatternElement: CD1
PELEM CD1=21

// ActionPatternElement: CD2
PELEM CD2=22

// Action: MateNow
PELEM MateNow=30

// ActionPatternElement: DoMate3
PELEM DoMate3=32

// ActionPatternElement: DoMate2
PELEM DoMate2=29

// ActionPatternElement: DoMate1
PELEM DoMate1=28

// Randomly turn one way or another
// Competence: TurnLeftOrRight
PELEM TurnLeftOrRight=12

// Action: Stop
PELEM Stop=16

// Template for Drives
// Drive: Explore
PELEM Explore=10

// SetSpeed to 2
// Action: HighSpeed
PELEM HighSpeed=6

// ActionPattern: DoMating
PELEM DoMating=27

// Action: MoveBack
PELEM MoveBack=17

// ActionPatternElement: TA5
PELEM TA5=5

// Action: RandomTurn90
PELEM RandomTurn90=9

// Make an Emergency Avoid when very close to a wall
// Drive: EmergencyAvoid
PELEM EmergencyAvoid=11

// Drive forward, avoiding objects as they are sensed
// Competence: ForwardAvoiding
PELEM ForwardAvoiding=1

// CompetenceElement: CE4
PELEM CE4=2

// CompetenceElement: CE3
PELEM CE3=3

// CompetenceElement: CE2
PELEM CE2=19

// CompetenceElement: CE1
PELEM CE1=8

// ActionPattern: ReverseTurnAvoid
PELEM ReverseTurnAvoid=4

// Action: TurnRight45
PELEM TurnRight45=18

// Action: TurnLeft45
PELEM TurnLeft45=25

// CompetenceElement: TLR2
PELEM TLR2=24

// CompetenceElement: TLR1
PELEM TLR1=23

// ActionPattern: ChangeDirection
PELEM ChangeDirection=20

// *** Plan output complete. RobotSenses and RobotActions follow ... ***

// Return true if a potential mate is detected
// RobotSense: SenseMate
//	SenseID=9
RSENSE SenseMate=9

// Returns random number 1-100
// RobotSense: Random
//	SenseID=7
RSENSE Random=7

// Returns 50
// RobotSense: Fifty
//	SenseID=8
RSENSE Fifty=8

// Rear left sensor - returns 0-4
// RobotSense: RearLeft
//	SenseID=3
RSENSE RearLeft=3

// Front left sensor - returns 0-4
// RobotSense: FrontLeft
//	SenseID=2
RSENSE FrontLeft=2

// Rear right sensor - returns 0-4
// RobotSense: RearRight
//	SenseID=4
RSENSE RearRight=4

// Front sensor - returns 0-4
// RobotSense: Front
//	SenseID=5
RSENSE Front=5

// Front right sensor - returns 0-4
// RobotSense: FrontRight
//	SenseID=1
RSENSE FrontRight=1

// Rear sensor - returns 0-4
// RobotSense: Rear
//	SenseID=6
RSENSE Rear=6

// Mate with conspecific
// RobotAction: Mate
//	ActionID=8
RACTION Mate=8

// Rotate either clockwise or anti-clockwise by ActionValue degrees. Must be a multiple of 45. Random selection of direction.
// RobotAction: RandomTurn
//	ActionID=9
RACTION RandomTurn=9

// Rotate clockwise by ActionValue degrees. Must be a multiple of 45
// RobotAction: Turn
//	ActionID=3
RACTION Turn=3

// Stop moving.
// RobotAction: Stop
//	ActionID=4
RACTION Stop=4

// Srt the robot speed in units per clock tick.
// RobotAction: SetSpeed
//	ActionID=1
RACTION SetSpeed=1

// Move in the direction of travel by ActionValue units
// RobotAction: MoveBy
//	ActionID=2
RACTION MoveBy=2

// Always suceed
// RobotAction: Succeed
//	ActionID=7
RACTION Succeed=7

// Sleep for ActionValue clock cycles
// RobotAction: Sleep
//	ActionID=5
RACTION Sleep=5

// Always fail
// RobotAction: Fail
//	ActionID=6
RACTION Fail=6

// *** Output completed. ***
